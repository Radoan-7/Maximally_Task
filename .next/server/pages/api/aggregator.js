"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/aggregator";
exports.ids = ["pages/api/aggregator"];
exports.modules = {

/***/ "cheerio":
/*!**************************!*\
  !*** external "cheerio" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("cheerio");

/***/ }),

/***/ "node-fetch":
/*!*****************************!*\
  !*** external "node-fetch" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("node-fetch");

/***/ }),

/***/ "(api)/./pages/api/aggregator.js":
/*!*********************************!*\
  !*** ./pages/api/aggregator.js ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst fetch = __webpack_require__(/*! node-fetch */ \"node-fetch\");\nconst cheerio = __webpack_require__(/*! cheerio */ \"cheerio\");\nconst GITHUB_TOKEN = process.env.GITHUB_TOKEN || null;\n// cache object to reduce API calls\nlet cache = {\n    ts: 0,\n    data: null\n};\nconst CACHE_TTL = 1000 * 60 * 5; // 5 minutes\n// --- Fetch hackathons from Unstop ---\nasync function fetchUnstop() {\n    const MAX_SITEMAPS = 12;\n    const base = \"https://unstop.com/sitemaps/opportunity/sitemap\";\n    const headers = {\n        \"User-Agent\": \"Mozilla/5.0\",\n        Accept: \"application/xml,text/xml;q=0.9,*/*;q=0.8\"\n    };\n    const sitemapUrls = Array.from({\n        length: MAX_SITEMAPS\n    }, (_, i)=>`${base}${i + 1}.xml`);\n    const items = [];\n    for (const url of sitemapUrls){\n        try {\n            const res = await fetch(url, {\n                headers\n            });\n            if (!res.ok) continue;\n            const xml = await res.text();\n            const $ = cheerio.load(xml, {\n                xmlMode: true\n            });\n            $(\"url\").each((_, el)=>{\n                const loc = $(el).find(\"loc\").text().trim();\n                if (!loc || !/\\/hackathons\\//i.test(loc)) return;\n                const lastmod = $(el).find(\"lastmod\").text().trim();\n                const title = slugToTitle((loc.split(\"/hackathons/\")[1] || \"\").split(\"/\")[0]);\n                items.push({\n                    source: \"unstop\",\n                    title: title || \"Untitled\",\n                    link: loc,\n                    description: \"\",\n                    tags: [\n                        lastmod\n                    ].filter(Boolean),\n                    prizeText: \"\"\n                });\n            });\n        } catch (e) {\n            console.error(\"Unstop fetch error:\", e);\n        }\n    }\n    // deduplicate by link\n    const map = new Map();\n    for (const it of items)if (!map.has(it.link)) map.set(it.link, it);\n    const out = Array.from(map.values());\n    // sort by last modified\n    out.sort((a, b)=>new Date(b.tags[0] || 0) - new Date(a.tags[0] || 0));\n    return out;\n}\nfunction slugToTitle(slug) {\n    if (!slug) return \"\";\n    const cleaned = slug.replace(/-\\d+$/, \"\");\n    return cleaned.split(\"-\").map((s)=>s ? s[0].toUpperCase() + s.slice(1) : \"\").join(\" \");\n}\n// --- Fetch hackathons from GitHub ---\nasync function fetchGithubHackathons() {\n    const q = encodeURIComponent(\"hackathon in:name,description pushed:>=\" + getDateNDaysAgo(365));\n    const url = `https://api.github.com/search/repositories?q=${q}&sort=updated&order=desc&per_page=30`;\n    const headers = {\n        \"User-Agent\": \"hackathon-aggregator\"\n    };\n    if (GITHUB_TOKEN) headers.Authorization = `token ${GITHUB_TOKEN}`;\n    const res = await fetch(url, {\n        headers\n    });\n    if (!res.ok) return [];\n    const json = await res.json();\n    const items = json.items || [];\n    return items.map((it)=>({\n            source: \"github\",\n            title: it.full_name,\n            link: it.html_url,\n            description: it.description || \"\",\n            tags: it.topics || [],\n            prizeText: \"\"\n        }));\n}\nfunction getDateNDaysAgo(n) {\n    const d = new Date();\n    d.setDate(d.getDate() - n);\n    return d.toISOString().slice(0, 10);\n}\n// --- Prize parser ---\nfunction parsePrize(prizeText) {\n    if (!prizeText) return 0;\n    let txt = prizeText.toUpperCase().replace(/[,₹£€$]/g, \"\").trim();\n    // Handle \"10K\", \"5K\", \"2L\" (lakhs), etc.\n    if (/(\\d+)\\s*K/.test(txt)) {\n        return parseInt(RegExp.$1, 10) * 1000;\n    }\n    if (/(\\d+)\\s*L/.test(txt)) {\n        return parseInt(RegExp.$1, 10) * 100000;\n    }\n    const match = txt.match(/(\\d{2,})/);\n    return match ? Number(match[1]) : 0;\n}\n// --- Main API handler ---\nmodule.exports = async (req, res)=>{\n    try {\n        const { source = \"all\", filter = \"\", minPrize = 0 } = req.query;\n        const now = Date.now();\n        if (!cache.data || now - cache.ts > CACHE_TTL) {\n            const [unstop, github] = await Promise.allSettled([\n                fetchUnstop(),\n                fetchGithubHackathons()\n            ]);\n            cache = {\n                ts: Date.now(),\n                data: {\n                    unstop: unstop.status === \"fulfilled\" ? unstop.value : [],\n                    github: github.status === \"fulfilled\" ? github.value : []\n                }\n            };\n        }\n        let combined = [];\n        if (source === \"unstop\" || source === \"all\") combined = combined.concat(cache.data.unstop);\n        if (source === \"github\" || source === \"all\") combined = combined.concat(cache.data.github);\n        // --- Keyword filter ---\n        const f = filter.toLowerCase();\n        if (f) {\n            combined = combined.filter((item)=>{\n                const text = (item.title + \" \" + item.description + \" \" + (item.tags || []).join(\" \")).toLowerCase();\n                if (f === \"ai\") return text.includes(\"ai\") || text.includes(\"machine learning\");\n                if (f === \"student\") return text.includes(\"student\");\n                return text.includes(f);\n            });\n        }\n        // --- Prize filter ---\n        const minP = Number(minPrize || 0);\n        if (minP > 0) {\n            combined = combined.filter((item)=>parsePrize(item.prizeText) >= minP);\n        }\n        res.setHeader(\"Cache-Control\", \"s-maxage=60, stale-while-revalidate=120\");\n        res.status(200).json({\n            ok: true,\n            count: combined.length,\n            data: combined\n        });\n    } catch (err) {\n        console.error(\"Hackathon API error:\", err);\n        res.status(500).json({\n            ok: false,\n            error: String(err)\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/aggregator.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/aggregator.js"));
module.exports = __webpack_exports__;

})();