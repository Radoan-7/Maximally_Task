"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/aggregator";
exports.ids = ["pages/api/aggregator"];
exports.modules = {

/***/ "cheerio":
/*!**************************!*\
  !*** external "cheerio" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("cheerio");

/***/ }),

/***/ "node-fetch":
/*!*****************************!*\
  !*** external "node-fetch" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("node-fetch");

/***/ }),

/***/ "(api)/./pages/api/aggregator.js":
/*!*********************************!*\
  !*** ./pages/api/aggregator.js ***!
  \*********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst fetch = __webpack_require__(/*! node-fetch */ \"node-fetch\");\nconst cheerio = __webpack_require__(/*! cheerio */ \"cheerio\");\nconst GITHUB_TOKEN = process.env.GITHUB_TOKEN || null;\n// cache object to reduce API calls\nlet cache = {\n    ts: 0,\n    data: null\n};\nconst CACHE_TTL = 1000 * 60 * 5; // 5 minutes\n// --- Fetch hackathons from Devpost ---\nasync function fetchDevpost() {\n    const url = \"https://devpost.com/hackathons\";\n    const res = await fetch(url, {\n        headers: {\n            \"User-Agent\": \"Mozilla/5.0\"\n        }\n    });\n    const html = await res.text();\n    const $ = cheerio.load(html);\n    const cards = [];\n    $(\".hackathon-tile, .project-card\").each((i, el)=>{\n        const title = $(el).find(\"h3, .title, .block-title\").first().text().trim() || $(el).find(\"a\").first().text().trim();\n        const link = $(el).find(\"a\").first().attr(\"href\");\n        const href = link?.startsWith(\"http\") ? link : `https://devpost.com${link || \"\"}`;\n        const desc = $(el).find(\".blurb, .description, p\").first().text().trim();\n        const tags = [];\n        $(el).find(\".tags a, .tag\").each((_, t)=>tags.push($(t).text().trim()));\n        const prizeText = $(el).find(\".prize, .prizes, .category-list\").text().trim() || \"\";\n        cards.push({\n            source: \"devpost\",\n            title: title || \"Untitled\",\n            link: href,\n            description: desc || \"\",\n            tags,\n            prizeText\n        });\n    });\n    return cards;\n}\n// --- Fetch hackathons from GitHub repos ---\nasync function fetchGithubHackathons() {\n    const q = encodeURIComponent(\"hackathon in:name,description pushed:>=\" + getDateNDaysAgo(365));\n    const url = `https://api.github.com/search/repositories?q=${q}&sort=updated&order=desc&per_page=30`;\n    const headers = {\n        \"User-Agent\": \"hackathon-aggregator\"\n    };\n    if (GITHUB_TOKEN) {\n        headers.Authorization = `token ${GITHUB_TOKEN}`;\n    }\n    const res = await fetch(url, {\n        headers\n    });\n    if (!res.ok) return [];\n    const json = await res.json();\n    const items = json.items || [];\n    return items.map((it)=>({\n            source: \"github\",\n            title: it.full_name,\n            link: it.html_url,\n            description: it.description || \"\",\n            tags: it.topics || [],\n            prizeText: \"\"\n        }));\n}\n// --- Helper: Get date N days ago (for GitHub search) ---\nfunction getDateNDaysAgo(n) {\n    const d = new Date();\n    d.setDate(d.getDate() - n);\n    return d.toISOString().slice(0, 10);\n}\n// --- Main API handler ---\nmodule.exports = async (req, res)=>{\n    try {\n        const { source = \"all\", filter = \"\", minPrize = 0 } = req.query;\n        const now = Date.now();\n        if (!cache.data || now - cache.ts > CACHE_TTL) {\n            const [devpost, github] = await Promise.allSettled([\n                fetchDevpost(),\n                fetchGithubHackathons()\n            ]);\n            cache = {\n                ts: Date.now(),\n                data: {\n                    dev: devpost.status === \"fulfilled\" ? devpost.value : [],\n                    gh: github.status === \"fulfilled\" ? github.value : []\n                }\n            };\n        }\n        let combined = [];\n        if (source === \"devpost\" || source === \"all\") {\n            combined = combined.concat(cache.data.dev);\n        }\n        if (source === \"github\" || source === \"all\") {\n            combined = combined.concat(cache.data.gh);\n        }\n        // --- Filtering logic ---\n        const f = filter.toLowerCase();\n        if (f) {\n            combined = combined.filter((item)=>{\n                const text = (item.title + \" \" + item.description + \" \" + (item.tags || []).join(\" \")).toLowerCase();\n                if (f === \"ai\") return text.includes(\"ai\") || text.includes(\"machine learning\");\n                if (f === \"student\") return text.includes(\"student\");\n                return text.includes(f);\n            });\n        }\n        // --- Prize filter ---\n        const minP = Number(minPrize || 0);\n        if (minP > 0) {\n            combined = combined.filter((item)=>{\n                const clean = (item.prizeText || \"\").replace(/[,$₹£€]/g, \"\");\n                const match = clean.match(/(\\d{2,})/);\n                return match ? Number(match[1]) >= minP : false;\n            });\n        }\n        res.setHeader(\"Cache-Control\", \"s-maxage=60, stale-while-revalidate=120\");\n        res.status(200).json({\n            ok: true,\n            count: combined.length,\n            data: combined\n        });\n    } catch (err) {\n        console.error(\"Hackathon API error:\", err);\n        res.status(500).json({\n            ok: false,\n            error: String(err)\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvYWdncmVnYXRvci5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTUEsUUFBUUMsbUJBQU9BLENBQUMsOEJBQVk7QUFDbEMsTUFBTUMsVUFBVUQsbUJBQU9BLENBQUMsd0JBQVM7QUFFakMsTUFBTUUsZUFBZUMsUUFBUUMsR0FBRyxDQUFDRixZQUFZLElBQUk7QUFFakQsbUNBQW1DO0FBQ25DLElBQUlHLFFBQVE7SUFBRUMsSUFBSTtJQUFHQyxNQUFNO0FBQUs7QUFDaEMsTUFBTUMsWUFBWSxPQUFPLEtBQUssR0FBRyxZQUFZO0FBRTdDLHdDQUF3QztBQUN4QyxlQUFlQztJQUNiLE1BQU1DLE1BQU07SUFDWixNQUFNQyxNQUFNLE1BQU1aLE1BQU1XLEtBQUs7UUFBRUUsU0FBUztZQUFFLGNBQWM7UUFBYztJQUFFO0lBQ3hFLE1BQU1DLE9BQU8sTUFBTUYsSUFBSUcsSUFBSTtJQUMzQixNQUFNQyxJQUFJZCxRQUFRZSxJQUFJLENBQUNIO0lBQ3ZCLE1BQU1JLFFBQVEsRUFBRTtJQUVoQkYsRUFBRSxrQ0FBa0NHLElBQUksQ0FBQyxDQUFDQyxHQUFHQztRQUMzQyxNQUFNQyxRQUNKTixFQUFFSyxJQUFJRSxJQUFJLENBQUMsNEJBQTRCQyxLQUFLLEdBQUdULElBQUksR0FBR1UsSUFBSSxNQUMxRFQsRUFBRUssSUFBSUUsSUFBSSxDQUFDLEtBQUtDLEtBQUssR0FBR1QsSUFBSSxHQUFHVSxJQUFJO1FBRXJDLE1BQU1DLE9BQU9WLEVBQUVLLElBQUlFLElBQUksQ0FBQyxLQUFLQyxLQUFLLEdBQUdHLElBQUksQ0FBQztRQUMxQyxNQUFNQyxPQUFPRixNQUFNRyxXQUFXLFVBQzFCSCxPQUNBLENBQUMsbUJBQW1CLEVBQUVBLFFBQVEsR0FBRyxDQUFDO1FBRXRDLE1BQU1JLE9BQU9kLEVBQUVLLElBQUlFLElBQUksQ0FBQywyQkFBMkJDLEtBQUssR0FBR1QsSUFBSSxHQUFHVSxJQUFJO1FBRXRFLE1BQU1NLE9BQU8sRUFBRTtRQUNmZixFQUFFSyxJQUNDRSxJQUFJLENBQUMsaUJBQ0xKLElBQUksQ0FBQyxDQUFDYSxHQUFHQyxJQUFNRixLQUFLRyxJQUFJLENBQUNsQixFQUFFaUIsR0FBR2xCLElBQUksR0FBR1UsSUFBSTtRQUU1QyxNQUFNVSxZQUNKbkIsRUFBRUssSUFBSUUsSUFBSSxDQUFDLG1DQUFtQ1IsSUFBSSxHQUFHVSxJQUFJLE1BQU07UUFFakVQLE1BQU1nQixJQUFJLENBQUM7WUFDVEUsUUFBUTtZQUNSZCxPQUFPQSxTQUFTO1lBQ2hCSSxNQUFNRTtZQUNOUyxhQUFhUCxRQUFRO1lBQ3JCQztZQUNBSTtRQUNGO0lBQ0Y7SUFFQSxPQUFPakI7QUFDVDtBQUVBLDZDQUE2QztBQUM3QyxlQUFlb0I7SUFDYixNQUFNQyxJQUFJQyxtQkFDUiw0Q0FBNENDLGdCQUFnQjtJQUc5RCxNQUFNOUIsTUFBTSxDQUFDLDZDQUE2QyxFQUFFNEIsRUFBRSxvQ0FBb0MsQ0FBQztJQUNuRyxNQUFNMUIsVUFBVTtRQUFFLGNBQWM7SUFBdUI7SUFFdkQsSUFBSVYsY0FBYztRQUNoQlUsUUFBUTZCLGFBQWEsR0FBRyxDQUFDLE1BQU0sRUFBRXZDLGFBQWEsQ0FBQztJQUNqRDtJQUVBLE1BQU1TLE1BQU0sTUFBTVosTUFBTVcsS0FBSztRQUFFRTtJQUFRO0lBQ3ZDLElBQUksQ0FBQ0QsSUFBSStCLEVBQUUsRUFBRSxPQUFPLEVBQUU7SUFFdEIsTUFBTUMsT0FBTyxNQUFNaEMsSUFBSWdDLElBQUk7SUFDM0IsTUFBTUMsUUFBUUQsS0FBS0MsS0FBSyxJQUFJLEVBQUU7SUFFOUIsT0FBT0EsTUFBTUMsR0FBRyxDQUFDLENBQUNDLEtBQVE7WUFDeEJYLFFBQVE7WUFDUmQsT0FBT3lCLEdBQUdDLFNBQVM7WUFDbkJ0QixNQUFNcUIsR0FBR0UsUUFBUTtZQUNqQlosYUFBYVUsR0FBR1YsV0FBVyxJQUFJO1lBQy9CTixNQUFNZ0IsR0FBR0csTUFBTSxJQUFJLEVBQUU7WUFDckJmLFdBQVc7UUFDYjtBQUNGO0FBRUEsMERBQTBEO0FBQzFELFNBQVNNLGdCQUFnQlUsQ0FBQztJQUN4QixNQUFNQyxJQUFJLElBQUlDO0lBQ2RELEVBQUVFLE9BQU8sQ0FBQ0YsRUFBRUcsT0FBTyxLQUFLSjtJQUN4QixPQUFPQyxFQUFFSSxXQUFXLEdBQUdDLEtBQUssQ0FBQyxHQUFHO0FBQ2xDO0FBRUEsMkJBQTJCO0FBQzNCQyxPQUFPQyxPQUFPLEdBQUcsT0FBT0MsS0FBS2hEO0lBQzNCLElBQUk7UUFDRixNQUFNLEVBQUV3QixTQUFTLEtBQUssRUFBRXlCLFNBQVMsRUFBRSxFQUFFQyxXQUFXLENBQUMsRUFBRSxHQUFHRixJQUFJRyxLQUFLO1FBRS9ELE1BQU1DLE1BQU1YLEtBQUtXLEdBQUc7UUFDcEIsSUFBSSxDQUFDMUQsTUFBTUUsSUFBSSxJQUFJd0QsTUFBTTFELE1BQU1DLEVBQUUsR0FBR0UsV0FBVztZQUM3QyxNQUFNLENBQUN3RCxTQUFTQyxPQUFPLEdBQUcsTUFBTUMsUUFBUUMsVUFBVSxDQUFDO2dCQUNqRDFEO2dCQUNBNEI7YUFDRDtZQUVEaEMsUUFBUTtnQkFDTkMsSUFBSThDLEtBQUtXLEdBQUc7Z0JBQ1p4RCxNQUFNO29CQUNKNkQsS0FBS0osUUFBUUssTUFBTSxLQUFLLGNBQWNMLFFBQVFNLEtBQUssR0FBRyxFQUFFO29CQUN4REMsSUFBSU4sT0FBT0ksTUFBTSxLQUFLLGNBQWNKLE9BQU9LLEtBQUssR0FBRyxFQUFFO2dCQUN2RDtZQUNGO1FBQ0Y7UUFFQSxJQUFJRSxXQUFXLEVBQUU7UUFDakIsSUFBSXJDLFdBQVcsYUFBYUEsV0FBVyxPQUFPO1lBQzVDcUMsV0FBV0EsU0FBU0MsTUFBTSxDQUFDcEUsTUFBTUUsSUFBSSxDQUFDNkQsR0FBRztRQUMzQztRQUNBLElBQUlqQyxXQUFXLFlBQVlBLFdBQVcsT0FBTztZQUMzQ3FDLFdBQVdBLFNBQVNDLE1BQU0sQ0FBQ3BFLE1BQU1FLElBQUksQ0FBQ2dFLEVBQUU7UUFDMUM7UUFFQSwwQkFBMEI7UUFDMUIsTUFBTUcsSUFBSWQsT0FBT2UsV0FBVztRQUM1QixJQUFJRCxHQUFHO1lBQ0xGLFdBQVdBLFNBQVNaLE1BQU0sQ0FBQyxDQUFDZ0I7Z0JBQzFCLE1BQU05RCxPQUFPLENBQ1g4RCxLQUFLdkQsS0FBSyxHQUNWLE1BQ0F1RCxLQUFLeEMsV0FBVyxHQUNoQixNQUNBLENBQUN3QyxLQUFLOUMsSUFBSSxJQUFJLEVBQUUsRUFBRStDLElBQUksQ0FBQyxJQUFHLEVBQzFCRixXQUFXO2dCQUViLElBQUlELE1BQU0sTUFBTSxPQUFPNUQsS0FBS2dFLFFBQVEsQ0FBQyxTQUFTaEUsS0FBS2dFLFFBQVEsQ0FBQztnQkFDNUQsSUFBSUosTUFBTSxXQUFXLE9BQU81RCxLQUFLZ0UsUUFBUSxDQUFDO2dCQUMxQyxPQUFPaEUsS0FBS2dFLFFBQVEsQ0FBQ0o7WUFDdkI7UUFDRjtRQUVBLHVCQUF1QjtRQUN2QixNQUFNSyxPQUFPQyxPQUFPbkIsWUFBWTtRQUNoQyxJQUFJa0IsT0FBTyxHQUFHO1lBQ1pQLFdBQVdBLFNBQVNaLE1BQU0sQ0FBQyxDQUFDZ0I7Z0JBQzFCLE1BQU1LLFFBQVEsQ0FBQ0wsS0FBSzFDLFNBQVMsSUFBSSxFQUFDLEVBQUdnRCxPQUFPLENBQUMsWUFBWTtnQkFDekQsTUFBTUMsUUFBUUYsTUFBTUUsS0FBSyxDQUFDO2dCQUMxQixPQUFPQSxRQUFRSCxPQUFPRyxLQUFLLENBQUMsRUFBRSxLQUFLSixPQUFPO1lBQzVDO1FBQ0Y7UUFFQXBFLElBQUl5RSxTQUFTLENBQUMsaUJBQWlCO1FBQy9CekUsSUFBSTBELE1BQU0sQ0FBQyxLQUFLMUIsSUFBSSxDQUFDO1lBQUVELElBQUk7WUFBTTJDLE9BQU9iLFNBQVNjLE1BQU07WUFBRS9FLE1BQU1pRTtRQUFTO0lBQzFFLEVBQUUsT0FBT2UsS0FBSztRQUNaQyxRQUFRQyxLQUFLLENBQUMsd0JBQXdCRjtRQUN0QzVFLElBQUkwRCxNQUFNLENBQUMsS0FBSzFCLElBQUksQ0FBQztZQUFFRCxJQUFJO1lBQU8rQyxPQUFPQyxPQUFPSDtRQUFLO0lBQ3ZEO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oYWNrYXRob24tYWdncmVnYXRvci8uL3BhZ2VzL2FwaS9hZ2dyZWdhdG9yLmpzPzkyZDQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZmV0Y2ggPSByZXF1aXJlKFwibm9kZS1mZXRjaFwiKTtcclxuY29uc3QgY2hlZXJpbyA9IHJlcXVpcmUoXCJjaGVlcmlvXCIpO1xyXG5cclxuY29uc3QgR0lUSFVCX1RPS0VOID0gcHJvY2Vzcy5lbnYuR0lUSFVCX1RPS0VOIHx8IG51bGw7XHJcblxyXG4vLyBjYWNoZSBvYmplY3QgdG8gcmVkdWNlIEFQSSBjYWxsc1xyXG5sZXQgY2FjaGUgPSB7IHRzOiAwLCBkYXRhOiBudWxsIH07XHJcbmNvbnN0IENBQ0hFX1RUTCA9IDEwMDAgKiA2MCAqIDU7IC8vIDUgbWludXRlc1xyXG5cclxuLy8gLS0tIEZldGNoIGhhY2thdGhvbnMgZnJvbSBEZXZwb3N0IC0tLVxyXG5hc3luYyBmdW5jdGlvbiBmZXRjaERldnBvc3QoKSB7XHJcbiAgY29uc3QgdXJsID0gXCJodHRwczovL2RldnBvc3QuY29tL2hhY2thdGhvbnNcIjtcclxuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh1cmwsIHsgaGVhZGVyczogeyBcIlVzZXItQWdlbnRcIjogXCJNb3ppbGxhLzUuMFwiIH0gfSk7XHJcbiAgY29uc3QgaHRtbCA9IGF3YWl0IHJlcy50ZXh0KCk7XHJcbiAgY29uc3QgJCA9IGNoZWVyaW8ubG9hZChodG1sKTtcclxuICBjb25zdCBjYXJkcyA9IFtdO1xyXG5cclxuICAkKFwiLmhhY2thdGhvbi10aWxlLCAucHJvamVjdC1jYXJkXCIpLmVhY2goKGksIGVsKSA9PiB7XHJcbiAgICBjb25zdCB0aXRsZSA9XHJcbiAgICAgICQoZWwpLmZpbmQoXCJoMywgLnRpdGxlLCAuYmxvY2stdGl0bGVcIikuZmlyc3QoKS50ZXh0KCkudHJpbSgpIHx8XHJcbiAgICAgICQoZWwpLmZpbmQoXCJhXCIpLmZpcnN0KCkudGV4dCgpLnRyaW0oKTtcclxuXHJcbiAgICBjb25zdCBsaW5rID0gJChlbCkuZmluZChcImFcIikuZmlyc3QoKS5hdHRyKFwiaHJlZlwiKTtcclxuICAgIGNvbnN0IGhyZWYgPSBsaW5rPy5zdGFydHNXaXRoKFwiaHR0cFwiKVxyXG4gICAgICA/IGxpbmtcclxuICAgICAgOiBgaHR0cHM6Ly9kZXZwb3N0LmNvbSR7bGluayB8fCBcIlwifWA7XHJcblxyXG4gICAgY29uc3QgZGVzYyA9ICQoZWwpLmZpbmQoXCIuYmx1cmIsIC5kZXNjcmlwdGlvbiwgcFwiKS5maXJzdCgpLnRleHQoKS50cmltKCk7XHJcblxyXG4gICAgY29uc3QgdGFncyA9IFtdO1xyXG4gICAgJChlbClcclxuICAgICAgLmZpbmQoXCIudGFncyBhLCAudGFnXCIpXHJcbiAgICAgIC5lYWNoKChfLCB0KSA9PiB0YWdzLnB1c2goJCh0KS50ZXh0KCkudHJpbSgpKSk7XHJcblxyXG4gICAgY29uc3QgcHJpemVUZXh0ID1cclxuICAgICAgJChlbCkuZmluZChcIi5wcml6ZSwgLnByaXplcywgLmNhdGVnb3J5LWxpc3RcIikudGV4dCgpLnRyaW0oKSB8fCBcIlwiO1xyXG5cclxuICAgIGNhcmRzLnB1c2goe1xyXG4gICAgICBzb3VyY2U6IFwiZGV2cG9zdFwiLFxyXG4gICAgICB0aXRsZTogdGl0bGUgfHwgXCJVbnRpdGxlZFwiLFxyXG4gICAgICBsaW5rOiBocmVmLFxyXG4gICAgICBkZXNjcmlwdGlvbjogZGVzYyB8fCBcIlwiLFxyXG4gICAgICB0YWdzLFxyXG4gICAgICBwcml6ZVRleHQsXHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIGNhcmRzO1xyXG59XHJcblxyXG4vLyAtLS0gRmV0Y2ggaGFja2F0aG9ucyBmcm9tIEdpdEh1YiByZXBvcyAtLS1cclxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hHaXRodWJIYWNrYXRob25zKCkge1xyXG4gIGNvbnN0IHEgPSBlbmNvZGVVUklDb21wb25lbnQoXHJcbiAgICBcImhhY2thdGhvbiBpbjpuYW1lLGRlc2NyaXB0aW9uIHB1c2hlZDo+PVwiICsgZ2V0RGF0ZU5EYXlzQWdvKDM2NSlcclxuICApO1xyXG5cclxuICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9zZWFyY2gvcmVwb3NpdG9yaWVzP3E9JHtxfSZzb3J0PXVwZGF0ZWQmb3JkZXI9ZGVzYyZwZXJfcGFnZT0zMGA7XHJcbiAgY29uc3QgaGVhZGVycyA9IHsgXCJVc2VyLUFnZW50XCI6IFwiaGFja2F0aG9uLWFnZ3JlZ2F0b3JcIiB9O1xyXG5cclxuICBpZiAoR0lUSFVCX1RPS0VOKSB7XHJcbiAgICBoZWFkZXJzLkF1dGhvcml6YXRpb24gPSBgdG9rZW4gJHtHSVRIVUJfVE9LRU59YDtcclxuICB9XHJcblxyXG4gIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVybCwgeyBoZWFkZXJzIH0pO1xyXG4gIGlmICghcmVzLm9rKSByZXR1cm4gW107XHJcblxyXG4gIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xyXG4gIGNvbnN0IGl0ZW1zID0ganNvbi5pdGVtcyB8fCBbXTtcclxuXHJcbiAgcmV0dXJuIGl0ZW1zLm1hcCgoaXQpID0+ICh7XHJcbiAgICBzb3VyY2U6IFwiZ2l0aHViXCIsXHJcbiAgICB0aXRsZTogaXQuZnVsbF9uYW1lLFxyXG4gICAgbGluazogaXQuaHRtbF91cmwsXHJcbiAgICBkZXNjcmlwdGlvbjogaXQuZGVzY3JpcHRpb24gfHwgXCJcIixcclxuICAgIHRhZ3M6IGl0LnRvcGljcyB8fCBbXSxcclxuICAgIHByaXplVGV4dDogXCJcIixcclxuICB9KSk7XHJcbn1cclxuXHJcbi8vIC0tLSBIZWxwZXI6IEdldCBkYXRlIE4gZGF5cyBhZ28gKGZvciBHaXRIdWIgc2VhcmNoKSAtLS1cclxuZnVuY3Rpb24gZ2V0RGF0ZU5EYXlzQWdvKG4pIHtcclxuICBjb25zdCBkID0gbmV3IERhdGUoKTtcclxuICBkLnNldERhdGUoZC5nZXREYXRlKCkgLSBuKTtcclxuICByZXR1cm4gZC50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKTtcclxufVxyXG5cclxuLy8gLS0tIE1haW4gQVBJIGhhbmRsZXIgLS0tXHJcbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgKHJlcSwgcmVzKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHsgc291cmNlID0gXCJhbGxcIiwgZmlsdGVyID0gXCJcIiwgbWluUHJpemUgPSAwIH0gPSByZXEucXVlcnk7XHJcblxyXG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcclxuICAgIGlmICghY2FjaGUuZGF0YSB8fCBub3cgLSBjYWNoZS50cyA+IENBQ0hFX1RUTCkge1xyXG4gICAgICBjb25zdCBbZGV2cG9zdCwgZ2l0aHViXSA9IGF3YWl0IFByb21pc2UuYWxsU2V0dGxlZChbXHJcbiAgICAgICAgZmV0Y2hEZXZwb3N0KCksXHJcbiAgICAgICAgZmV0Y2hHaXRodWJIYWNrYXRob25zKCksXHJcbiAgICAgIF0pO1xyXG5cclxuICAgICAgY2FjaGUgPSB7XHJcbiAgICAgICAgdHM6IERhdGUubm93KCksXHJcbiAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgZGV2OiBkZXZwb3N0LnN0YXR1cyA9PT0gXCJmdWxmaWxsZWRcIiA/IGRldnBvc3QudmFsdWUgOiBbXSxcclxuICAgICAgICAgIGdoOiBnaXRodWIuc3RhdHVzID09PSBcImZ1bGZpbGxlZFwiID8gZ2l0aHViLnZhbHVlIDogW10sXHJcbiAgICAgICAgfSxcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgY29tYmluZWQgPSBbXTtcclxuICAgIGlmIChzb3VyY2UgPT09IFwiZGV2cG9zdFwiIHx8IHNvdXJjZSA9PT0gXCJhbGxcIikge1xyXG4gICAgICBjb21iaW5lZCA9IGNvbWJpbmVkLmNvbmNhdChjYWNoZS5kYXRhLmRldik7XHJcbiAgICB9XHJcbiAgICBpZiAoc291cmNlID09PSBcImdpdGh1YlwiIHx8IHNvdXJjZSA9PT0gXCJhbGxcIikge1xyXG4gICAgICBjb21iaW5lZCA9IGNvbWJpbmVkLmNvbmNhdChjYWNoZS5kYXRhLmdoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyAtLS0gRmlsdGVyaW5nIGxvZ2ljIC0tLVxyXG4gICAgY29uc3QgZiA9IGZpbHRlci50b0xvd2VyQ2FzZSgpO1xyXG4gICAgaWYgKGYpIHtcclxuICAgICAgY29tYmluZWQgPSBjb21iaW5lZC5maWx0ZXIoKGl0ZW0pID0+IHtcclxuICAgICAgICBjb25zdCB0ZXh0ID0gKFxyXG4gICAgICAgICAgaXRlbS50aXRsZSArXHJcbiAgICAgICAgICBcIiBcIiArXHJcbiAgICAgICAgICBpdGVtLmRlc2NyaXB0aW9uICtcclxuICAgICAgICAgIFwiIFwiICtcclxuICAgICAgICAgIChpdGVtLnRhZ3MgfHwgW10pLmpvaW4oXCIgXCIpXHJcbiAgICAgICAgKS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuICAgICAgICBpZiAoZiA9PT0gXCJhaVwiKSByZXR1cm4gdGV4dC5pbmNsdWRlcyhcImFpXCIpIHx8IHRleHQuaW5jbHVkZXMoXCJtYWNoaW5lIGxlYXJuaW5nXCIpO1xyXG4gICAgICAgIGlmIChmID09PSBcInN0dWRlbnRcIikgcmV0dXJuIHRleHQuaW5jbHVkZXMoXCJzdHVkZW50XCIpO1xyXG4gICAgICAgIHJldHVybiB0ZXh0LmluY2x1ZGVzKGYpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyAtLS0gUHJpemUgZmlsdGVyIC0tLVxyXG4gICAgY29uc3QgbWluUCA9IE51bWJlcihtaW5Qcml6ZSB8fCAwKTtcclxuICAgIGlmIChtaW5QID4gMCkge1xyXG4gICAgICBjb21iaW5lZCA9IGNvbWJpbmVkLmZpbHRlcigoaXRlbSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNsZWFuID0gKGl0ZW0ucHJpemVUZXh0IHx8IFwiXCIpLnJlcGxhY2UoL1ssJOKCucKj4oKsXS9nLCBcIlwiKTtcclxuICAgICAgICBjb25zdCBtYXRjaCA9IGNsZWFuLm1hdGNoKC8oXFxkezIsfSkvKTtcclxuICAgICAgICByZXR1cm4gbWF0Y2ggPyBOdW1iZXIobWF0Y2hbMV0pID49IG1pblAgOiBmYWxzZTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzLnNldEhlYWRlcihcIkNhY2hlLUNvbnRyb2xcIiwgXCJzLW1heGFnZT02MCwgc3RhbGUtd2hpbGUtcmV2YWxpZGF0ZT0xMjBcIik7XHJcbiAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IG9rOiB0cnVlLCBjb3VudDogY29tYmluZWQubGVuZ3RoLCBkYXRhOiBjb21iaW5lZCB9KTtcclxuICB9IGNhdGNoIChlcnIpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoXCJIYWNrYXRob24gQVBJIGVycm9yOlwiLCBlcnIpO1xyXG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBvazogZmFsc2UsIGVycm9yOiBTdHJpbmcoZXJyKSB9KTtcclxuICB9XHJcbn07XHJcbiJdLCJuYW1lcyI6WyJmZXRjaCIsInJlcXVpcmUiLCJjaGVlcmlvIiwiR0lUSFVCX1RPS0VOIiwicHJvY2VzcyIsImVudiIsImNhY2hlIiwidHMiLCJkYXRhIiwiQ0FDSEVfVFRMIiwiZmV0Y2hEZXZwb3N0IiwidXJsIiwicmVzIiwiaGVhZGVycyIsImh0bWwiLCJ0ZXh0IiwiJCIsImxvYWQiLCJjYXJkcyIsImVhY2giLCJpIiwiZWwiLCJ0aXRsZSIsImZpbmQiLCJmaXJzdCIsInRyaW0iLCJsaW5rIiwiYXR0ciIsImhyZWYiLCJzdGFydHNXaXRoIiwiZGVzYyIsInRhZ3MiLCJfIiwidCIsInB1c2giLCJwcml6ZVRleHQiLCJzb3VyY2UiLCJkZXNjcmlwdGlvbiIsImZldGNoR2l0aHViSGFja2F0aG9ucyIsInEiLCJlbmNvZGVVUklDb21wb25lbnQiLCJnZXREYXRlTkRheXNBZ28iLCJBdXRob3JpemF0aW9uIiwib2siLCJqc29uIiwiaXRlbXMiLCJtYXAiLCJpdCIsImZ1bGxfbmFtZSIsImh0bWxfdXJsIiwidG9waWNzIiwibiIsImQiLCJEYXRlIiwic2V0RGF0ZSIsImdldERhdGUiLCJ0b0lTT1N0cmluZyIsInNsaWNlIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcSIsImZpbHRlciIsIm1pblByaXplIiwicXVlcnkiLCJub3ciLCJkZXZwb3N0IiwiZ2l0aHViIiwiUHJvbWlzZSIsImFsbFNldHRsZWQiLCJkZXYiLCJzdGF0dXMiLCJ2YWx1ZSIsImdoIiwiY29tYmluZWQiLCJjb25jYXQiLCJmIiwidG9Mb3dlckNhc2UiLCJpdGVtIiwiam9pbiIsImluY2x1ZGVzIiwibWluUCIsIk51bWJlciIsImNsZWFuIiwicmVwbGFjZSIsIm1hdGNoIiwic2V0SGVhZGVyIiwiY291bnQiLCJsZW5ndGgiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJTdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./pages/api/aggregator.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/aggregator.js"));
module.exports = __webpack_exports__;

})();